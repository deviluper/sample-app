user  nginx;
worker_processes  auto;

pid        /var/run/nginx.pid;
events {
    worker_connections  1024;
    use epoll;
}
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


    access_log  /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log warn;

    sendfile    on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    server_names_hash_bucket_size 64;
    tcp_nopush     on;


    # allows big media uploads
    client_max_body_size 120m;

    gzip  on;
    gzip_min_length  1000;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml image/svg+xml application/font-woff;

    #FD
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;


    include /etc/nginx/conf.d/*.conf;

   #upstream backend {
   #     server staging-backend-service;
   # }
   #upstream bot {
   #     server staging-bot-service;
   #	}
   #upstream machine{
   #    server  staging-ml-service;
   #    }


    server {
      listen 80;


     root /usr/share/nginx/html;
      
	location / {
	    try_files $uri $uri/ /index.html;
	}
  location ~*  \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|svg)$ {
        expires 365d;
    }

    location ~*  \.(pdf)$ {
        expires 30d;
    }

  #location /api {
  #    proxy_pass http://backend;
 #}
  #location /messages {
  #    proxy_pass http://bot;
  # }
  #location /analysis {
  #    proxy_pass http://machine;
  # }



# Requests for socket.io are passed on to Node on port 3000
#location ~* \.io {
#        proxy_set_header X-Real-IP $remote_addr;
#  	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#  	proxy_set_header Host $http_host;
#        proxy_set_header X-NginX-Proxy true;
#        proxy_set_header Access-Control-Allow-Origin *;

#        proxy_pass http://backend;
#        proxy_redirect off;
#        proxy_http_version 1.1;
#  	proxy_set_header Upgrade $http_upgrade;
#        proxy_set_header Connection "upgrade";


#      }
#    }
}
}

